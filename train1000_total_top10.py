import os
import json
import torchvision
import time
import torch
import torch.nn as nn
import torch.optim as optim
from torchvision import transforms, datasets
from tqdm import tqdm

from model import resnet34
rank = [1000, 369, 344, 225, 396, 741, 103, 513, 949, 147, 185, 571, 780, 867, 657, 526, 697, 772, 311, 331, 801, 202, 565, 547, 770, 140, 541, 222, 517, 403, 625, 525, 748, 840, 490, 88, 766, 95, 463, 757, 733, 351, 774, 300, 228, 530, 998, 564, 809, 399, 552, 286, 461, 924, 240, 394, 807, 864, 644, 566, 870, 950, 427, 928, 475, 73, 132, 34, 964, 887, 51, 381, 366, 316, 317, 28, 650, 930, 976, 479, 313, 320, 166, 847, 85, 746, 68, 875, 437, 660, 265, 941, 378, 467, 734, 431, 465, 196, 178, 797, 554, 727, 423, 961, 184, 159, 979, 447, 354, 829, 630, 277, 448, 80, 113, 965, 309, 687, 32, 821, 373, 903, 180, 81, 685, 197, 368, 921, 592, 91, 684, 134, 267, 631, 87, 20, 573, 881, 141, 664, 501, 607, 489, 915, 435, 765, 395, 57, 651, 6, 298, 643, 675, 429, 210, 715, 64, 558, 732, 694, 71, 207, 506, 590, 318, 738, 382, 798, 719, 290, 604, 596, 505, 305, 296, 690, 957, 866, 789, 112, 253, 686, 106, 128, 909, 288, 577, 913, 534, 156, 730, 487, 444, 60, 861, 42, 626, 400, 815, 472, 794, 58, 457, 835, 171, 910, 219, 811, 853, 613, 833, 802, 589, 509, 450, 209, 790, 583, 365, 15, 848, 327, 405, 786, 967, 548, 521, 533, 886, 659, 662, 198, 478, 484, 425, 191, 598, 215, 580, 720, 75, 83, 402, 586, 182, 947, 167, 667, 47, 93, 714, 994, 665, 434, 736, 97, 980, 248, 258, 374, 422, 107, 656, 837, 226, 211, 66, 620, 865, 269, 36, 982, 341, 914, 328, 763, 231, 988, 536, 999, 480, 174, 329, 175, 278, 518, 145, 289, 846, 481, 138, 46, 443, 647, 907, 754, 545, 235, 414, 432, 257, 469, 981, 22, 673, 129, 324, 12, 306, 591, 392, 610, 335, 232, 557, 163, 856, 814, 792, 805, 898, 535, 10, 951, 504, 161, 771, 652, 641, 372, 192, 560, 985, 350, 561, 672, 974, 340, 307, 878, 39, 410, 23, 773, 239, 725, 540, 393, 370, 713, 639, 63, 177, 84, 139, 810, 904, 25, 430, 243, 466, 711, 353, 109, 605, 627, 121, 918, 428, 99, 743, 874, 682, 549, 54, 795, 234, 850, 271, 279, 440, 364, 294, 751, 11, 332, 818, 176, 1, 776, 144, 38, 519, 116, 418, 333, 105, 978, 151, 945, 451, 255, 857, 384, 367, 588, 357, 154, 371, 168, 841, 537, 954, 397, 189, 796, 173, 876, 936, 880, 777, 708, 208, 143, 77, 623, 997, 745, 355, 323, 16, 758, 955, 862, 970, 808, 122, 587, 971, 252, 119, 762, 563, 539, 706, 820, 528, 275, 135, 65, 152, 622, 894, 984, 523, 756, 952, 778, 576, 446, 760, 500, 118, 649, 923, 485, 616, 959, 852, 508, 908, 680, 343, 254, 597, 768, 531, 137, 836, 705, 386, 524, 640, 775, 679, 502, 637, 670, 655, 285, 146, 419, 319, 205, 33, 230, 342, 102, 19, 187, 755, 338, 781, 783, 412, 556, 813, 498, 634, 376, 830, 688, 538, 170, 712, 912, 293, 624, 468, 575, 661, 889, 356, 869, 282, 609, 157, 438, 227, 345, 617, 348, 752, 716, 681, 242, 499, 30, 551, 213, 101, 804, 454, 858, 608, 718, 150, 740, 79, 731, 747, 761, 310, 742, 460, 570, 491, 653, 931, 89, 203, 800, 516, 45, 94, 989, 785, 822, 699, 104, 721, 825, 149, 911, 314, 407, 359, 532, 854, 724, 737, 220, 312, 702, 204, 550, 991, 767, 569, 408, 325, 495, 3, 352, 62, 787, 845, 944, 701, 948, 339, 581, 251, 110, 212, 510, 520, 969, 956, 621, 522, 710, 250, 404, 568, 417, 416, 453, 49, 241, 799, 839, 169, 148, 834, 476, 471, 668, 496, 124, 126, 722, 238, 299, 891, 494, 259, 906, 336, 677, 806, 926, 244, 831, 633, 206, 958, 669, 695, 779, 917, 599, 648, 263, 572, 155, 67, 181, 595, 127, 696, 629, 877, 379, 963, 233, 292, 274, 158, 901, 442, 983, 291, 973, 53, 223, 942, 214, 302, 663, 671, 542, 753, 347, 666, 507, 474, 358, 972, 188, 900, 7, 125, 791, 266, 937, 409, 55, 884, 477, 868, 2, 645, 268, 892, 458, 69, 593, 304, 391, 420, 388, 486, 849, 628, 938, 966, 421, 470, 692, 546, 142, 221, 115, 334, 165, 31, 939, 562, 642, 413, 21, 842, 493, 769, 635, 120, 674, 284, 916, 14, 873, 280, 824, 529, 827, 582, 578, 96, 788, 739, 8, 632, 133, 78, 111, 567, 377, 74, 70, 996, 488, 638, 415, 236, 82, 897, 424, 838, 703, 584, 37, 455, 646, 200, 114, 72, 482, 272, 683, 441, 123, 871, 380, 816, 308, 933, 361, 600, 303, 990, 195, 968, 689, 817, 844, 218, 445, 759, 18, 812, 246, 717, 832, 654, 728, 464, 579, 859, 885, 784, 946, 843, 29, 153, 462, 452, 676, 245, 962, 512, 98, 179, 433, 890, 992, 893, 297, 744, 960, 247, 935, 162, 17, 698, 749, 5, 44, 360, 52, 819, 261, 851, 117, 56, 943, 35, 337, 9, 497, 888, 401, 283, 515, 260, 895, 896, 237, 882, 224, 612, 398, 925, 987, 193, 108, 934, 879, 574, 41, 993, 86, 527, 4, 977, 603, 602, 59, 905, 863, 362, 553, 940, 160, 459, 349, 276, 90, 199, 514, 658, 503, 860, 449, 92, 61, 919, 782, 986, 723, 13, 363, 473, 735, 411, 826, 281, 385, 321, 436, 636, 929, 270, 823, 217, 190, 975, 301, 387, 229, 492, 707, 726, 614, 764, 709, 619, 618, 264, 330, 691, 26, 932, 43, 883, 27, 216, 750, 543, 326, 601, 40, 793, 606, 183, 899, 262, 136, 953, 678, 927, 611, 559, 172, 729, 872, 346, 920, 828, 390, 693, 256, 76, 483, 704, 375, 389, 555, 131, 426, 585, 594, 100, 50, 803, 273, 439, 315, 194, 456, 24, 511, 295, 700, 855, 164, 995, 130, 48, 383, 186, 615, 249, 544, 406, 922, 287, 201, 902, 322]
# category = [[0,1,2,8,9],[3,4,5,6,7]]
rank = [981, 916, 564, 756, 994, 709, 697, 610, 426, 83, 246, 956, 999, 1000, 583, 371, 811, 905, 602, 644, 948, 237, 998, 605, 834, 604, 824, 207, 424, 566, 441, 713, 782, 859, 396, 125, 762, 163, 514, 807, 843, 488, 739, 486, 213, 359, 298, 439, 980, 589, 638, 379, 360, 438, 663, 411, 952, 997, 800, 632, 914, 306, 366, 556, 592, 96, 101, 81, 434, 969, 17, 512, 420, 437, 229, 6, 453, 471, 313, 446, 586, 68, 128, 923, 16, 879, 28, 976, 425, 715, 357, 345, 414, 717, 808, 593, 545, 222, 268, 940, 784, 875, 575, 403, 145, 153, 341, 711, 435, 904, 751, 214, 705, 152, 117, 302, 220, 721, 62, 964, 370, 401, 136, 26, 319, 272, 436, 433, 869, 33, 769, 91, 520, 691, 157, 142, 452, 949, 143, 614, 481, 877, 615, 473, 622, 926, 369, 71, 881, 3, 551, 619, 469, 217, 287, 876, 10, 676, 835, 774, 126, 110, 689, 560, 498, 742, 244, 801, 865, 203, 724, 506, 530, 674, 494, 647, 454, 925, 873, 258, 300, 832, 12, 57, 408, 355, 526, 428, 726, 289, 799, 525, 254, 111, 897, 44, 395, 352, 968, 458, 743, 9, 508, 979, 181, 539, 251, 857, 962, 609, 985, 763, 842, 562, 350, 245, 955, 447, 409, 51, 950, 687, 607, 850, 417, 550, 252, 766, 933, 641, 892, 73, 888, 577, 507, 266, 735, 205, 817, 870, 135, 24, 493, 582, 204, 367, 121, 633, 106, 41, 776, 315, 636, 578, 818, 238, 431, 295, 228, 618, 318, 131, 886, 991, 275, 546, 22, 813, 970, 219, 89, 402, 600, 580, 693, 837, 197, 316, 775, 374, 480, 211, 451, 179, 280, 559, 93, 276, 987, 642, 150, 84, 460, 727, 387, 810, 640, 256, 265, 650, 432, 683, 332, 2, 608, 70, 455, 54, 173, 579, 338, 499, 456, 239, 786, 201, 932, 971, 829, 840, 487, 841, 177, 517, 787, 82, 954, 851, 802, 479, 52, 558, 343, 621, 635, 521, 349, 685, 227, 939, 55, 549, 61, 830, 346, 889, 791, 596, 524, 624, 535, 119, 296, 85, 20, 899, 591, 127, 336, 194, 587, 821, 388, 38, 485, 648, 132, 324, 400, 137, 740, 966, 620, 734, 78, 906, 212, 910, 169, 464, 679, 628, 233, 568, 46, 552, 915, 60, 37, 755, 118, 30, 496, 133, 718, 686, 167, 571, 353, 376, 616, 311, 947, 461, 518, 771, 285, 196, 444, 47, 922, 572, 337, 698, 4, 623, 297, 912, 382, 953, 653, 863, 218, 308, 134, 637, 466, 781, 241, 557, 13, 794, 274, 931, 377, 880, 58, 887, 327, 174, 168, 729, 541, 534, 882, 901, 764, 223, 49, 19, 43, 555, 975, 527, 584, 773, 421, 814, 852, 673, 853, 462, 116, 746, 468, 710, 836, 399, 960, 340, 312, 878, 574, 235, 741, 894, 380, 267, 804, 745, 406, 440, 585, 908, 855, 634, 707, 643, 820, 191, 161, 202, 459, 170, 154, 317, 279, 8, 40, 230, 770, 646, 779, 760, 567, 714, 900, 347, 670, 812, 795, 626, 492, 80, 823, 513, 410, 657, 828, 363, 793, 958, 253, 917, 195, 871, 301, 210, 759, 457, 668, 263, 538, 891, 548, 680, 645, 108, 491, 269, 144, 989, 684, 943, 884, 528, 184, 662, 120, 898, 864, 890, 321, 862, 594, 737, 649, 750, 450, 86, 206, 967, 563, 100, 53, 536, 712, 895, 672, 77, 385, 990, 166, 290, 736, 570, 448, 681, 993, 788, 728, 299, 569, 719, 261, 665, 544, 752, 344, 720, 695, 334, 123, 531, 146, 868, 957, 320, 866, 293, 335, 816, 232, 69, 25, 339, 827, 474, 443, 606, 688, 427, 529, 449, 854, 475, 658, 482, 113, 66, 883, 972, 171, 178, 919, 573, 588, 785, 744, 27, 74, 885, 675, 381, 959, 540, 532, 542, 221, 839, 749, 307, 304, 893, 500, 164, 393, 768, 731, 819, 389, 484, 845, 522, 671, 45, 180, 158, 748, 97, 368, 753, 982, 422, 286, 708, 470, 250, 149, 259, 407, 351, 331, 294, 34, 226, 504, 172, 189, 856, 627, 533, 778, 652, 612, 669, 502, 392, 284, 198, 323, 107, 92, 965, 270, 271, 703, 63, 961, 833, 911, 21, 690, 430, 992, 924, 23, 429, 282, 394, 519, 495, 476, 974, 765, 423, 322, 291, 732, 598, 809, 325, 356, 105, 362, 129, 75, 442, 561, 846, 772, 103, 945, 682, 543, 792, 151, 790, 182, 398, 1, 984, 240, 941, 326, 935, 613, 576, 5, 874, 603, 32, 716, 64, 31, 148, 599, 372, 88, 155, 412, 547, 654, 249, 130, 18, 983, 192, 867, 780, 505, 50, 595, 798, 231, 36, 141, 365, 281, 831, 661, 122, 937, 515, 934, 283, 405, 463, 483, 511, 314, 183, 358, 858, 986, 944, 39, 797, 913, 98, 942, 188, 783, 977, 747, 822, 383, 725, 995, 902, 825, 415, 996, 102, 225, 342, 404, 847, 397, 418, 509, 59, 208, 364, 909, 348, 951, 696, 806, 601, 193, 465, 79, 29, 848, 767, 104, 14, 660, 112, 946, 209, 907, 56, 162, 489, 48, 216, 109, 803, 936, 611, 445, 702, 234, 930, 963, 243, 896, 309, 789, 667, 416, 310, 248, 156, 413, 928, 200, 185, 655, 76, 723, 90, 375, 590, 777, 115, 354, 988, 659, 757, 477, 278, 631, 255, 224, 159, 215, 849, 844, 478, 978, 630, 7, 67, 651, 921, 373, 860, 65, 722, 706, 758, 386, 927, 175, 664, 516, 288, 838, 330, 262, 754, 242, 94, 391, 361, 333, 236, 565, 553, 617, 629, 826, 805, 523, 656, 187, 190, 733, 42, 329, 95, 973, 124, 114, 872, 581, 328, 501, 165, 903, 738, 273, 247, 199, 186, 277, 692, 419, 704, 467, 87, 761, 929, 305, 490, 920, 384, 678, 72, 160, 639, 701, 700, 694, 597, 99, 625, 510, 796, 11, 138, 918, 292, 554, 472, 176, 666, 15, 677, 264, 861, 938, 260, 378, 140, 35, 257, 139, 815, 497, 730, 699, 390, 503, 147, 303, 537]

top10 = []
amount10 = 0
top20 = []
amount20 = 0
top40 = []
amount40 = 0
top80 = []
amount80 = 0
for i in range(len(rank)):
    if (rank[i] > 900):
        top10.append(i)
        amount10 += 1
    if (rank[i] > 800):
        top20.append(i)
        amount20 += 1
    if (rank[i] > 600):
        top40.append(i)
        amount40 += 1
    if (rank[i] > 200):
        top80.append(i)
        amount80 += 1


def main():
    # for i in [10,20,30,40,50,60,70,80,90]:
    top10.sort()
    top20.sort()
    top40.sort()
    top80.sort()
    device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
    print("using {} device.".format(device))
    # print(i)
    data_transform = {
        "train": transforms.Compose([transforms.Resize(256),
                                     transforms.CenterCrop(224),
                                     transforms.ToTensor(),
                                     transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])]),
        "val": transforms.Compose([transforms.Resize(256),
                                   transforms.CenterCrop(224),
                                   transforms.ToTensor(),
                                   transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])])}

    train_set = torchvision.datasets.CIFAR10(root='datasets', train=True,
                                             download=False, transform=data_transform["train"])
    # 加载训练集，实际过程需要分批次（batch）训练
    train_loader = torch.utils.data.DataLoader(train_set, batch_size=1000,
                                               shuffle=False, num_workers=0)

    # 10000张测试图片
    test_set = torchvision.datasets.CIFAR10(root='datasets', train=False,
                                            download=False, transform=data_transform["val"])
    val_num = len(test_set)
    test_loader = torch.utils.data.DataLoader(test_set, batch_size=10,
                                              shuffle=False, num_workers=0)

    # test_loader2 = torch.utils.data.DataLoader(test_set, batch_size=100,
    #                                           shuffle=False, num_workers=0)
    # test_data_iter2 = iter(test_loader2)
    # test_image2, test_label2 = test_data_iter2.next()
    # test_label333 = test_label2.clone()
    # test_label333[0] = 10

    net = resnet34()

    # change fc layer structure
    in_channel = net.fc.in_features
    net.fc = nn.Linear(in_channel, 10)
    net.to(device)


    # load pretrain weights
    # download url: https://download.pytorch.org/models/resnet34-333f7ec4.pth
    # model_weight_path = "./pth_file4_1000/resNet34_epoch1_1000.pth"
    model_weight_path = './pth_file7_1000_nopre/resNet34_epoch2_1000_2.pth'
    # model_weight_path = "pth_file1/resnet34-pre.pth"
    assert os.path.exists(model_weight_path), "file {} does not exist.".format(model_weight_path)
    net.load_state_dict(torch.load(model_weight_path, map_location=device))

    # for param in net.parameters():
    #     param.requires_grad = False




    train_data_iter = iter(train_loader)
    train_image, train_label = train_data_iter.next()
    train_extract = torch.zeros(1000, 3, 224, 224)
    label_extract = torch.zeros(1000).long()
    for i in range(1000):
        train_extract[i] = train_image[i]
        label_extract[i] = train_label[i]

    train_top10 = torch.zeros(len(top10), 3, 224, 224)
    label_top10 = torch.zeros(len(top10)).long()
    for i in range(len(top10)):
        train_top10[i] = train_image[top10[i]]
        label_top10[i] = train_label[top10[i]]

    train_top20 = torch.zeros(len(top20), 3, 224, 224)
    label_top20 = torch.zeros(len(top20)).long()
    for i in range(len(top20)):
        train_top20[i] = train_image[top20[i]]
        label_top20[i] = train_label[top20[i]]

    train_top40 = torch.zeros(len(top40), 3, 224, 224)
    label_top40 = torch.zeros(len(top40)).long()
    for i in range(len(top40)):
        train_top40[i] = train_image[top40[i]]
        label_top40[i] = train_label[top40[i]]

    train_top80 = torch.zeros(len(top80), 3, 224, 224)
    label_top80 = torch.zeros(len(top80)).long()
    for i in range(len(top80)):
        train_top80[i] = train_image[top80[i]]
        label_top80[i] = train_label[top80[i]]



    # define loss function
    loss_function = nn.CrossEntropyLoss()

    # construct an optimizer
    params = [p for p in net.parameters() if p.requires_grad]
    optimizer = optim.Adam(params, lr=0.0001)

    epochs = 45
    best_acc = 0.0
    save_path = './pth_file4_1000/resNet34_tracin_epoch{}_{}.pth'  # save_path = './resNet34_new.pth'
    save_path = './pth_file7_1000_nopre/resNet34_epoch{}_1000_2.pth'
    train_steps = len(train_loader)
    for epoch in range(epochs):
        # train
        net.train()
        time_start = time.perf_counter()
        running_loss = 0.0
        # train_bar = tqdm(train_loader)
        # for step, data in enumerate(train_bar):
        for step in range(100):
            if (step < 80):
                # images, labels = data

                optimizer.zero_grad()
                logits = net(train_top80[step*10:step*10+9].to(device))
                loss = loss_function(logits, label_top80[step*10:step*10+9].to(device))
                loss.backward()
                optimizer.step()
            #     if(step == 99):
            #         torch.save(net.state_dict(), save_path)
            # #
            # #     # print statistics
                running_loss += loss.item()
            # else:
            #     if (step < 10):
            #         optimizer.zero_grad()
            #         logits = net(train_extract[step * 10:step * 10 + 9].to(device))
            #         loss = loss_function(logits, label_extract[step * 10:step * 10 + 9].to(device))
            #         loss.backward()
            #         optimizer.step()
            #
            # if (step == 99 and epoch == 0):
            #     # torch.save(net.state_dict(), save_path + str(step) + '.pth')
            #     torch.save(net.state_dict(), save_path)
            # if (epoch == 0):
            #     if (step < 100 and rank[step] > i):
            #         images, labels = data
            #
            #         optimizer.zero_grad()
            #         logits = net(images.to(device))
            #         loss = loss_function(logits, labels.to(device))
            #         loss.backward()
            #         optimizer.step()
            #
            #         # print statistics
            #         running_loss += loss.item()
            # elif(epoch == 1):
            #     if (step < 100 and rank[step] > (100 - i)):
            #         images, labels = data
            #
            #         optimizer.zero_grad()
            #         logits = net(images.to(device))
            #         loss = loss_function(logits, labels.to(device))
            #         loss.backward()
            #         optimizer.step()

                    # print statistics
                    # running_loss += loss.item()

        net.eval()
        acc = 0.0
        with torch.no_grad():
            val_bar = tqdm(test_loader)
            for val_data in val_bar:
                val_images, val_labels = val_data
                outputs = net(val_images.to(device))
                # loss = loss_function(outputs, test_labels)
                predict_y = torch.max(outputs, dim=1)[1]
                acc += torch.eq(predict_y, val_labels.to(device)).sum().item()

            val_accurate = acc / 10000
            print('[%d, %5d] train_loss: %.3f  test_accuracy: %.3f' %  # 打印epoch，step，loss，accuracy
                  (epoch + 1, step + 1, running_loss / 10, val_accurate))

            print('%f s' % (time.perf_counter() - time_start))  # 打印耗时
            # train_bar.desc = "train epoch[{}/{}] loss:{:.3f}".format(epoch + 1,
            #                                                          epochs,
            #                                                          loss)

        # if val_accurate > best_acc:
        #     best_acc = val_accurate
        #     torch.save(net.state_dict(), save_path.format(epoch+1))

    print('Finished Training')


if __name__ == '__main__':
    main()
